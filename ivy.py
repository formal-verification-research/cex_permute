import subprocess
import re
import os

# CALL_HINT = "call ext:"
CALL_HINT = "call ext:spec."

def check(ivyfile, temp_result):
  # ivy_command = "ivy_check trace=true " + str(ivyfile) + " > " + str(ivyfile).split(".")[0] + ".log"
  ivy_command = "ivy_check trace=true " + str(ivyfile) + " > " + temp_result.name
  print(ivy_command)
  os.system(ivy_command)
  # subprocess.run(ivy_command)
  remove_command = "rm -rf aigerfiles logfiles ivy_mc.log"
  os.system(remove_command)
  # subprocess.run("rm -rf aigerfiles logfiles ivy_mc.log")
  # return str(ivyfile).split(".")[0] + ".log"
  # with open(str(ivyfile).split(".")[0] + ".log") as log:
  #   return log.read()

# This dates back to before temp files:
# def get_path(logf):
#   with open(logf) as log:
#     trace = []
#     for line in log:
#       if CALL_HINT in line:
#         action = line.split(CALL_HINT)[1].rstrip("\n")
#         trace.append(action)
#     final_trace = ""
#     for item in trace:
#       final_trace = final_trace + (item + "\t")
#     return final_trace
####################################################

def get_path(log):
  trace = []
  for line in log:
    if CALL_HINT in line:
      action = line.split(CALL_HINT)[1].rstrip("\n")
      trace.append(action)
  final_trace = ""
  for item in trace:
    final_trace = final_trace + (item + "\t")
  return final_trace

def new_initial_state(i_state, old, new):
  # just get the state in the parentheses
  clean_i_state = i_state.split("(")[1]
  clean_i_state = clean_i_state.split(")")[0]
  i = clean_i_state.split(",")
  i_ivy = "\n\n#GENERATED BY ivy.new_initial_state FUNCTION\n"
  i_ivy = i_ivy + "after init {\n"
  i_ivy = i_ivy + "  s1 := " + i[0] + ";\n"
  i_ivy = i_ivy + "  s2 := " + i[1] + ";\n"
  i_ivy = i_ivy + "  s3 := " + i[2] + ";\n"
  i_ivy = i_ivy + "  s4 := " + i[3] + ";\n"
  i_ivy = i_ivy + "  s5 := " + i[4] + ";\n"
  i_ivy = i_ivy + "  s6 := " + i[5] + ";\n"
  i_ivy = i_ivy + "} #init"
  i_ivy = i_ivy + "\n\n#END GENERATED TEXT\n"

  old_str = old.read()
  new_str = re.sub(r'after init\s+\{[^}]*\}\s+#init', i_ivy, old_str)

  print("*")
  print("NEW INITIALIZATION IN IVY")
  print(i_ivy.replace("\n"," | "))
  print("END NEW INITIALIZATION IN IVY")
  print("*")

  new.write(new_str)